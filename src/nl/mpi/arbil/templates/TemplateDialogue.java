package nl.mpi.arbil.templates;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import nl.mpi.arbil.GuiHelper;
import nl.mpi.arbil.LinorgWindowManager;
import nl.mpi.arbil.clarin.CmdiProfileReader;

/*
 * TemplateDialogue.java
 * Created on May 20, 2010, 9:03:29 AM
 * @author Peter.Withers@mpi.nl
 */
public class TemplateDialogue extends javax.swing.JPanel implements ActionListener {

    JDialog parentFrame;

    /** Creates new form TemplateDialogue */
    public TemplateDialogue(JDialog parentFrameLocal) {
        parentFrame = parentFrameLocal;
        initComponents();
        populateLists();
        jProgressBar1.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        templatesPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        clarinPanel = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();

        setLayout(new java.awt.GridLayout(1, 0));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Internal Templates"));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.LINE_AXIS));

        jButton3.setText("New Template");
        jButton3.setToolTipText("Create a new editable template");
        jButton3.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel6.add(jButton3);

        jPanel2.add(jPanel6, java.awt.BorderLayout.PAGE_END);

        jScrollPane2.setViewportView(templatesPanel);

        jPanel2.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        add(jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Clarin Profiles"));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.LINE_AXIS));

        jButton1.setText("Reload Clarin Profiles");
        jButton1.setToolTipText("Download the latest clarin profiles");
        jButton1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton1);
        jPanel4.add(jProgressBar1);

        jPanel3.add(jPanel4, java.awt.BorderLayout.PAGE_END);

        jScrollPane1.setViewportView(clarinPanel);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        JPanel profilesTopPanel = new JPanel();
        profilesTopPanel.setLayout(new javax.swing.BoxLayout(profilesTopPanel, javax.swing.BoxLayout.LINE_AXIS));

//        jTextField1.setText("<profile url>"); //todo: complete this
//        profilesTopPanel.add(jTextField1);

        JButton addButton = new JButton();
        addButton.setText("Add URL");
        addButton.setToolTipText("Add a profile URL to the list");
        addButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String newDirectoryName = JOptionPane.showInputDialog(LinorgWindowManager.getSingleInstance().linorgFrame, "Enter the profile URL", "Add Profile", JOptionPane.PLAIN_MESSAGE, null, null, null).toString();
                ArbilTemplateManager.getSingleInstance().addSelectedTemplates("custom:" + newDirectoryName);
                populateLists();
            }
        });
        profilesTopPanel.add(addButton);
        JButton browseButton = new JButton();
        browseButton.setText("Add File");
        browseButton.setToolTipText("Browse for local profiles");
        browseButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                for (File selectedFile : LinorgWindowManager.getSingleInstance().showFileSelectBox("Select Profile", false, true, false)) {
                    ArbilTemplateManager.getSingleInstance().addSelectedTemplates("custom:" + selectedFile.toURI().toString());
                }
                populateLists();
            }
        });
        profilesTopPanel.add(browseButton);
        jPanel3.add(profilesTopPanel, java.awt.BorderLayout.PAGE_START);
        add(jPanel3);
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        jButton1.setVisible(false);
        jProgressBar1.setVisible(true);
        this.doLayout();
        new Thread() {

            @Override
            public void run() {
                CmdiProfileReader cmdiProfileReader = CmdiProfileReader.getSingleInstance();
                cmdiProfileReader.refreshProfiles(jProgressBar1);
                jProgressBar1.setVisible(false);
                jButton1.setVisible(true);
                doLayout();
            }
        }.start();
    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        try {
            String newDirectoryName = JOptionPane.showInputDialog(LinorgWindowManager.getSingleInstance().linorgFrame, "Enter the name for the new template", LinorgWindowManager.getSingleInstance().linorgFrame.getTitle(), JOptionPane.PLAIN_MESSAGE, null, null, null).toString();
            // if the user cancels the directory string will be a empty string.
            if (ArbilTemplateManager.getSingleInstance().getTemplateFile(newDirectoryName).exists()) {
                LinorgWindowManager.getSingleInstance().addMessageDialogToQueue("The template \"" + newDirectoryName + "\" already exists.", "Templates");
            }
            File freshTemplateFile = ArbilTemplateManager.getSingleInstance().createTemplate(newDirectoryName);
            if (freshTemplateFile != null) {
                GuiHelper.getSingleInstance().openFileInExternalApplication(freshTemplateFile.toURI());
                GuiHelper.getSingleInstance().openFileInExternalApplication(freshTemplateFile.getParentFile().toURI());
            } else {
                LinorgWindowManager.getSingleInstance().addMessageDialogToQueue("The template \"" + newDirectoryName + "\" could not be created.", "Templates");
            }
//                    LinorgWindowManager.getSingleInstance().addMessageDialogToQueue("This action is not yet available.", "Templates");
            //GuiHelper.linorgWindowManager.openUrlWindow(evt.getActionCommand() + templateList.get(evt.getActionCommand()).toString(), new File(templateList.get(evt.getActionCommand()).toString()).toURL());
//                    System.out.println("setting template: " + evt.getActionCommand());
//                    ArbilTemplateManager.getSingleInstance().setCurrentTemplate(evt.getActionCommand());
        } catch (Exception e) {
            GuiHelper.linorgBugCatcher.logError(e);
        }
        populateLists();
    }

    private void addSorted(JPanel targetPanel, ArrayList<JCheckBox> checkBoxArray) {
        targetPanel.removeAll();
        targetPanel.setLayout(new javax.swing.BoxLayout(targetPanel, javax.swing.BoxLayout.PAGE_AXIS));
        Collections.sort(checkBoxArray, new Comparator() {

            public int compare(Object firstItem, Object secondItem) {
                return (((JCheckBox) firstItem).getText().compareToIgnoreCase(((JCheckBox) secondItem).getText()));
            }
        });
        for (JCheckBox checkBox : checkBoxArray) {
            targetPanel.add(checkBox);
        }
    }

    private void populateLists() {
        ArrayList<String> selectedTamplates = ArbilTemplateManager.getSingleInstance().getSelectedTemplateArrayList();
        ArrayList<JCheckBox> checkBoxArray = new ArrayList<JCheckBox>();
        // add built in types
        for (String currentTemplateName[] : ArbilTemplateManager.getSingleInstance().getTemplate(null).rootTemplatesArray) {
            JCheckBox templateCheckBox;
            templateCheckBox = new JCheckBox();
            templateCheckBox.setText(currentTemplateName[1] + " (internal)");
            templateCheckBox.setName(currentTemplateName[1]);
            templateCheckBox.setActionCommand("builtin:" + currentTemplateName[0]);
            templateCheckBox.setSelected(selectedTamplates.contains(templateCheckBox.getActionCommand()));
            templateCheckBox.setToolTipText(currentTemplateName[1]);
            templateCheckBox.addActionListener(this);
            checkBoxArray.add(templateCheckBox);
        }
        // add custom templates
        for (String currentTemplateName : ArbilTemplateManager.getSingleInstance().getAvailableTemplates()) {
            JCheckBox templateCheckBox;
            templateCheckBox = new JCheckBox();
            templateCheckBox.setText(currentTemplateName);
            templateCheckBox.setName(currentTemplateName);
            templateCheckBox.setActionCommand("template:" + currentTemplateName);
            templateCheckBox.setSelected(selectedTamplates.contains(templateCheckBox.getActionCommand()));
            templateCheckBox.setToolTipText(currentTemplateName);
            templateCheckBox.addActionListener(this);
            checkBoxArray.add(templateCheckBox);
        }
        addSorted(templatesPanel, checkBoxArray);

        // add clarin types
        checkBoxArray.clear();
        CmdiProfileReader cmdiProfileReader = CmdiProfileReader.getSingleInstance();
        for (CmdiProfileReader.CmdiProfile currentCmdiProfile : cmdiProfileReader.cmdiProfileArray) {
            JCheckBox clarinProfileCheckBox;
            clarinProfileCheckBox = new JCheckBox();
            clarinProfileCheckBox.setText(currentCmdiProfile.name);
            clarinProfileCheckBox.setName(currentCmdiProfile.name);
            clarinProfileCheckBox.setActionCommand("clarin:" + currentCmdiProfile.getXsdHref());
            clarinProfileCheckBox.setSelected(selectedTamplates.contains(clarinProfileCheckBox.getActionCommand()));
            clarinProfileCheckBox.setToolTipText(currentCmdiProfile.description);
            clarinProfileCheckBox.addActionListener(this);
            checkBoxArray.add(clarinProfileCheckBox);
        }
        for (String currentSepectedProfile : selectedTamplates) {
            if (currentSepectedProfile.startsWith("custom:")) {
                String customUrlString = currentSepectedProfile.substring("custom:".length());
                String customName = currentSepectedProfile.substring(currentSepectedProfile.lastIndexOf("/") + 1);
                JCheckBox clarinProfileCheckBox;
                clarinProfileCheckBox = new JCheckBox();
                clarinProfileCheckBox.setText(customName);
                clarinProfileCheckBox.setName(customName);
                clarinProfileCheckBox.setActionCommand(customUrlString);
                clarinProfileCheckBox.setSelected(true);
                clarinProfileCheckBox.setToolTipText("custom profile, uncheck to remove");
                clarinProfileCheckBox.addActionListener(this);
                checkBoxArray.add(clarinProfileCheckBox);
            }
        }
        addSorted(clarinPanel, checkBoxArray);
        parentFrame.pack();
    }

    public void actionPerformed(ActionEvent e) {
        if (((JCheckBox) e.getSource()).isSelected()) {
            ArbilTemplateManager.getSingleInstance().addSelectedTemplates(e.getActionCommand());
        } else {
            ArbilTemplateManager.getSingleInstance().removeSelectedTemplates(e.getActionCommand());
        }
    }

    public static void showTemplatesDialogue() {
        JDialog dialog = new JDialog(LinorgWindowManager.getSingleInstance().linorgFrame, "Available Templates & Profiles", true);
        dialog.setContentPane(new TemplateDialogue(dialog));
        dialog.pack();
        dialog.setVisible(true);
    }

    public static void main(String[] args) {
        TemplateDialogue.showTemplatesDialogue();
        System.exit(0);
    }
    // Variables declaration
    private javax.swing.JPanel clarinPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPanel templatesPanel;
    // End of variables declaration
}
