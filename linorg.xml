<?xml version="1.0"?>
<project name="Linorg" default="compile">
    <target name="setproperties">
        <property name="SRCDIR" value="../../../../src/java/"/>
        <property name="BUILDDIR" value="classes"/>
        <property name="WEBAPPS_LIB" value="../../../../webapps/lib/"/>
    </target>
    <target name="all" depends="setproperties, getsvnversion, clean, clobber, compile, jar, run" description="clean, build, jar and run">
        <echo message="Ant Java Version: ${ant.java.version}"/>
    </target>
    <target name="clean" description="remove intermediate files">
        <delete dir="${BUILDDIR}"/>
        <mkdir dir="${BUILDDIR}"/>
    </target>
    <target name="clobber" depends="clean" description="remove all artifact files">
        <delete file="linorg.jar"/>
    </target>
    <!-- target compile (this is included by build.all) -->
    <target name="compile" description="compile the linorg source code to class files">
        <echo message="Compiling Linorg"/>
        <javac target="1.5" debug="on" srcdir="${SRCDIR}" destdir="${BUILDDIR}" includes="mpi/linorg/**.java">
            <classpath>
                <fileset dir="${WEBAPPS_LIB}" includes="*.jar"/>
            </classpath>
        </javac>
    </target>
    <target name="jar" depends="compile" description="create a Jar file">
        <jar destfile="linorg.jar">
            <fileset dir="classes" includes="mpi/linorg/**/*.class"/>
            <fileset dir="${SRCDIR}" includes="mpi/linorg/resources/icons/*.png"/>
            <fileset dir="${SRCDIR}" includes="mpi/linorg/resources/html/images/*.png"/>
            <fileset dir="${SRCDIR}" includes="mpi/linorg/resources/html/*.html"/>
            <fileset dir="${SRCDIR}" includes="mpi/linorg/resources/html/help/**/*.*"/>
            <fileset dir="${SRCDIR}" includes="mpi/linorg/resources/templates/*.xml"/>
            <fileset dir="${SRCDIR}" includes="mpi/linorg/resources/IMDI/FallBack/*.xml"/>
            <fileset dir="${SRCDIR}" includes="mpi/linorg/resources/xsd/*.xsd"/>
            <fileset dir="${SRCDIR}" includes="mpi/linorg/resources/xsl/*.xsl"/>
            <manifest>
                <attribute name="Main-Class" value="mpi.linorg.LinorgFrame"/>
                <attribute name="Class-Path" value="lib/corpusstructure.jar lib/imdiapi.jar lib/log4j-1.2.14.jar lib/typecheck.jar lib/xalan.jar lib/xercesImpl-2.9.0.jar"/>
            </manifest>
        </jar>
    </target>
    <target name="run" description="run the application">
        <java classname="mpi.linorg.Linorg">
            <classpath>
                <!--<fileset dir="${WEBAPPS_LIB}" includes="*.jar"/>-->
                <!--<filelist dir="${WEBAPPS_LIB}">
                    <file name="imdiapi.jar" />
                    <file name="log4j-1.2.14.jar" />
                    <file name="typecheck.jar" />
                    <file name="xalan-2.7.0.jar" />-->
                    <!--
                    <file name="saxon8-dom4j.jar" />
                    <file name="saxon8-dom.jar" />
                    <file name="saxon8.jar" />
                    <file name="saxon8-xqj.jar" />
                    <file name="saxon-dom-8.7.jar" />
                    <file name="log4j-1.2.9.jar" />
                    <file name="xalan-2.7.0.jar" />                    
                    <file name="xercesImpl-2.9.0.jar" />
                    -->
                    <!--
                    <file name="saxon8-ant.jar" />
                    <file name="saxon8-sql.jar" />
                    <file name="saxon8-jdom.jar" />
                    <file name="saxon8-xom.jar" />
                    <file name="saxon8-xpath.jar" />
                    <file name="xercesImpl.jar" />
                    -->
               <!-- </filelist>-->
                <pathelement location="linorg.jar"/>
            </classpath>
        </java>
    </target>
    <target depends="setproperties" name="getsvnversion">
        <property name="linorg.current.major" value="0"/>
        <property name="linorg.current.minor" value="2"/>
       <!-- <exec executable="svn" output="version.info">
            <arg value="info"/>
        </exec>
        <exec executable="grep" output="version.date">-->
            <!--<arg value="^Revision"/>-->
           <!-- <arg value="^Last Changed Date:"/>
            <arg value="version.info"/>
        </exec>-->
        <!--<exec executable="date" output="version.date" />-->
        <exec outputproperty="linorg.current.revision" executable="svnversion">
            <arg line="-n -c" />
            <arg line="${SRCDIR}mpi/linorg/" />
            <redirector>
                <outputfilterchain>
                    <tokenfilter>
                        <replaceregex pattern="^[0-9]*:?" replace="" flags="g"/>
                    </tokenfilter>
                </outputfilterchain>
            </redirector>
        </exec>
        <exec outputproperty="linorg.info.all" executable="svn">
            <arg line="info" />
            <arg line="${SRCDIR}mpi/linorg/" />
            <redirector>
                <outputfilterchain>
                    <tokenfilter>
                        <replaceregex pattern="^" replace="\\\\n" flags="g"/>
                    </tokenfilter>
                    <striplinebreaks/>
                </outputfilterchain>
            </redirector>
        </exec>
        <exec outputproperty="linorg.last.commit.date" executable="svn">
            <arg line="info" />
            <arg line="${SRCDIR}mpi/linorg/" />
            <redirector>
                <outputfilterchain>
                    <linecontainsregexp>
                        <regexp pattern="^Last Changed Date:" />
                    </linecontainsregexp>
                    <tokenfilter>
                        <replaceregex pattern=".*\/([^\/]+)$" replace="\1" flags="g"/>
                    </tokenfilter>
                </outputfilterchain>
            </redirector>
        </exec>
        <exec outputproperty="linorg.build.date" executable="date" />
        <echo file="${SRCDIR}mpi/linorg/LinorgVersion.java" append="false">package mpi.linorg;
public class LinorgVersion {
    String currentMajor = "${linorg.current.major}";
    String currentMinor = "${linorg.current.minor}";
    String currentRevision = "${linorg.current.revision}";
    String lastCommitDate = "${linorg.last.commit.date}";
    String compileDate = "${linorg.build.date}";
    String fullInfo = "${linorg.info.all}";
}
        </echo>
    </target>
    <target depends="setproperties, getsvnversion, clean, clobber, compile, jar" name="signlinorg">
        <!--<signjar keystore="/data1/repos/trunk/cert/mpi.keystore" alias="mpi.keyalias" storepass="123456">
            <path>
                <fileset dir="lib" includes="**/*.jar" />
            </path>
        </signjar>-->
        <signjar jar="linorg.jar"
        keystore="/data1/repos/trunk/cert/mpi.keystore"
        alias="mpi.keyalias" storepass="123456" />
    </target>
    <target depends="signlinorg" name="scp_to_lux09">
        <echo file="currentversion.txt">linorg${linorg.current.revision}.jar
        </echo>
        <input message="Please enter lux09 username:" addproperty="lux09.user" />
        <input message="Please enter lux09 password:" addproperty="lux09.pw" />
        <move file="linorg.jar" tofile="arbil-${linorg.current.major}-${linorg.current.minor}-${linorg.current.revision}.jar"/>
        <scp file="arbil-${linorg.current.major}-${linorg.current.minor}-${linorg.current.revision}.jar" todir="${lux09.user}:${lux09.pw}@lux09:/data/extweb1/docs/TG/j2se/jnlp/linorg/"/>
        <scp file="currentversion.txt" todir="${lux09.user}:${lux09.pw}@lux09:/data/extweb1/docs/TG/j2se/jnlp/linorg/"/>
        <move file="arbil-${linorg.current.major}-${linorg.current.minor}-${linorg.current.revision}.jar" tofile="arbil.jar"/>
    </target>
</project>
 
